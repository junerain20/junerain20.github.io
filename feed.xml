<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://crypto.sjtu.edu.cn//feed.xml" rel="self" type="application/atom+xml"/><link href="https://crypto.sjtu.edu.cn//" rel="alternate" type="text/html" hreflang="cn"/><updated>2024-11-19T08:57:30+00:00</updated><id>https://crypto.sjtu.edu.cn//feed.xml</id><title type="html">密码系统安全实验室</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">从签名重构公钥参数</title><link href="https://crypto.sjtu.edu.cn//blog/signature/" rel="alternate" type="text/html" title="从签名重构公钥参数"/><published>2024-11-19T00:00:00+00:00</published><updated>2024-11-19T00:00:00+00:00</updated><id>https://crypto.sjtu.edu.cn//blog/signature</id><content type="html" xml:base="https://crypto.sjtu.edu.cn//blog/signature/"><![CDATA[<h1 id="从签名重构公钥参数">从签名重构公钥参数</h1> <p>通常来说，对一个签名方案，我们可以使用公钥来判断给定的签名是否有效。但如果我们只有一个消息和一个签名，并确保该签名是有效的，如何知晓它对应的公钥呢？这里就存在一个有意思的点：攻击大众所认知的“每个人都使用密码学签名来完成一切”的思维，这篇博客就考虑了如何从各种签名方案的签名值去恢复公钥。</p> <h2 id="ecdsa">ECDSA</h2> <p>ECDSA 签名由两个整数 $(r, s) $组成，满足方程 $sR = zG + rP_A，z\equiv ms^{-1}\ mod\ n $，其中$ R $是椭圆曲线上 $x $坐标等于 $r $的点，能用$r$恢复完整的坐标；而$G$和$n$都是已知量。通过简单的推导，我们能得到$ P_A = r^{-1}sR - r^{-1}zG$，公钥就恢复了。</p> <h2 id="rsa">RSA</h2> <p>针对RSA签名的情形，我们需要两对消息/签名 $s_1 $和 $s_2$，$ m_1 $和$ m_2$，满足$ s^e \equiv m\ mod\ n$，公私钥还满足关系式： $ d \cdot e \equiv1\ mod\ \varphi(n)$。在使用中，e 通常等于65537，那么只需要计算 $ n’ = \gcd(s_1^e - m_1, s_2^e - m_2) $ 即可得到$n$。由于欧几里得算法非常高效，我们能够在短时间内算出$n$为2048位的结果。不过$n’$并不完全等于$n$，GCD出来的结果很可能是$n$和某些小素数的倍数，还需要进一步确定它是否包含小因子。</p> <h2 id="schnorr">Schnorr</h2> <p>Schnorr签名是一种椭圆曲线签名，和ECDSA类似，它的公钥从阶为$n$的椭圆曲线点$G$中得到$P_A = x_A G$，$r$为$P_A$的$x$坐标，签名时计算$c = H(r || m)$和$s \equiv k - c \cdot x_A\ mod\ n$。</p> <p>如果假设该算法的签名值为$(r, s)$，此时可以通过计算$P_A = c^{-1}R - c^{-1}sG$恢复公钥。</p> <p>但是在原本的Schnorr签名中，签名值为$(c, s)$，则无法恢复公钥，因为$c$是公钥经过哈希后得到的值，它具有足够的熵，很难恢复原像。</p> <h2 id="dilithium">Dilithium</h2> <p>现在让我们进入后量子算法Dilithium，先回忆一下，在LWE问题中，公钥是模素数$q$的一个向量$t$和一个矩阵$A$满足$t \equiv As+e\ mod\ q$，$s$和$e$是较短的密钥向量，Dilithium算法还无情的将$t$的低位给抛弃，只将其部分高位作为公钥给出。Dilithium的签名为$z = y + cs$，其中$c = H(m||w_1)$，而$w_1$是$Ay$的高比特，验证者检查$Az - ct = Ay+ c As - cAs - ce$是否有相同的高位$w_1$来验签。</p> <p>在Dilithium中，由于$w_1$明显大于$c$，为了降低带宽，所以签名固定为$(c, z)$，这种情况下与Schnorr签名类似，公钥无法恢复。当然，如果$w_1$也是签名的一部分，再已知$A$的话，就可以恢复出$t$的高位。如果$A$不知道，则不能恢复高位。</p> <h2 id="sphincs">SPHINCS+</h2> <p>SPHINCS+是一种基于哈希的签名方案，它的签名比较复杂：SPHINCS+使用一个多层次的Merkle树结构，每一层的根节点哈希值都依赖于下层节点的哈希值。最底层的叶节点通过一系列的哈希函数生成，签名包含特定叶节点的哈希值以及证明该叶节点属于Merkle树的认证路径。但是，SPHINCS+和Dilithium一样，都对公钥做了哈希处理使其无法恢复。不过如果还给出额外的信息，还是存在恢复公钥的可能性。</p> <h2 id="unbalanced-oil-and-vinegar">Unbalanced Oil and Vinegar</h2> <p>还记得高中时学的一元二次方程吗？给定一个$y$，计算出满足$ax^2+bx+c = y$的$x$，它存在通解即$x_{1, 2} = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$，因此，我们必须提高维度来稍微增加难度。</p> <p>UOV算法的公钥是$o$个含有$o+v$个变量的二次方程（即$f_i(x_1, x_2, \dots, x_{o+v})_{i=1, \dots, o}$）。它们都是齐次方程，因此可以用矩阵表示：$f_i(x)=x^TA_ix(x$是向量)。在签名时，签名者通过门陷函数计算出一些满足$(f_i(x))_i=1,\dots,o=H(m)$的$x$作为公钥。可以看出，UOV的签名比公钥短的多，单个签名显然无法恢复公钥。但如果我们收集了多个签名，就可以通过插值的方法恢复公钥多项式。</p> <p>通过理论推导，我们需要$\frac{(o+v)(o+v+1)}{2}$个消息/签名对即可恢复公钥。考虑到\((b_i)^{\frac{(o+v)(o+v+1)}{2}}_{i=1}=(X_i \cdot X_j)^{u+v, u+v}_{i=1, j=i}\)，</p> <p>对于每个消息/签名对$(x_i, y_i)$，我们能计算出$b_k(x_j)$。由于还知道$f_i(x_j)=y$，还能确定每个$f_i$都是$b_k$的线性组合，这就组成了一个线性方程组，那么只要收集到$\frac{(o+v)(o+v+1)}{2}$个签名，它就会有唯一解。</p> <h2 id="结论">结论</h2> <p>从上面可以看出，各个签名方案在公钥恢复的难易程度方面差异非常大。但是验签逻辑通常不是为了抗侧信道而设置的，因此即使使用了不会从代数上泄露公钥的方案，第三方仍然可能恢复公钥，这也成了算法设计需要考虑的一个重要方面。</p> <h2 id="reference">Reference</h2> <p><a href="https://keymaterial.net/2024/06/15/reconstructing-public-keys-from-signatures/">https://keymaterial.net/2024/06/15/reconstructing-public-keys-from-signatures/</a></p>]]></content><author><name></name></author><category term="pqc"/><category term="code"/><summary type="html"><![CDATA[从各种签名方案的签名值中恢复公钥的具体方法与难易程度，包括ECDSA、RSA、Schnorr、Dilithium、SPHINCS+和UOV等。]]></summary></entry><entry><title type="html">Crypto-library</title><link href="https://crypto.sjtu.edu.cn//blog/crypto-library/" rel="alternate" type="text/html" title="Crypto-library"/><published>2024-03-22T00:00:00+00:00</published><updated>2024-03-22T00:00:00+00:00</updated><id>https://crypto.sjtu.edu.cn//blog/crypto-library</id><content type="html" xml:base="https://crypto.sjtu.edu.cn//blog/crypto-library/"><![CDATA[<h1 id="libpqcrypto">libpqcrypto</h1> <p><code class="language-plaintext highlighter-rouge">libpqcrypto</code> is a new cryptographic software library produced by the PQCRYPTO project.</p> <p>PQCRYPTO, working jointly with many other researchers around the world, submitted 22 proposals to NIST’s ongoing post-quantum standardization project. Each submission specifies a family of cryptographic systems, offering various tradeoffs between performance and security. Each submission includes software: a (portable) reference C implementation, and in many cases additional (not necessarily portable) implementations providing better performance (often using assembly language or “intrinsics”). <code class="language-plaintext highlighter-rouge">libpqcrypto</code> includes software for the following 77 cryptographic systems (50 signature systems and 27 encryption systems) from 19 of the 22 PQCRYPTO submissions:</p> <ul> <li>BIG QUAKE: <code class="language-plaintext highlighter-rouge">crypto_kem_bigquake{1,3,5}</code></li> <li>Classic McEliece: <code class="language-plaintext highlighter-rouge">crypto_kem_mceliece{6960119,8192128}</code></li> <li>CRYSTALS-DILITHIUM: <code class="language-plaintext highlighter-rouge">crypto_sign_dilithium{2,3,4}</code></li> <li>CRYSTALS-KYBER: <code class="language-plaintext highlighter-rouge">crypto_kem_kyber{512,768,1024}</code></li> <li>DAGS: <code class="language-plaintext highlighter-rouge">crypto_kem_dags{3,5}</code></li> <li>FrodoKEM: <code class="language-plaintext highlighter-rouge">crypto_kem_frodokem{640,976}</code></li> <li>Gui: <code class="language-plaintext highlighter-rouge">crypto_sign_gui{184,312,448}</code></li> <li>KINDI: <code class="language-plaintext highlighter-rouge">crypto_kem_kindi{256342,256522,512222,512241,512321}</code></li> <li>LUOV: <code class="language-plaintext highlighter-rouge">crypto_sign_luov{863256,890351,8117404,4849242,6468330,8086399}</code></li> <li>MQDSS: <code class="language-plaintext highlighter-rouge">crypto_sign_mqdss{48,64}</code></li> <li>NewHope: <code class="language-plaintext highlighter-rouge">crypto_kem_newhope{512,1024}cca</code></li> <li>NTRU-HRSS-KEM: <code class="language-plaintext highlighter-rouge">crypto_kem_ntruhrss701</code></li> <li>NTRU Prime: <code class="language-plaintext highlighter-rouge">crypto_kem_{ntrulpr,sntrup}4591761</code></li> <li>Picnic: <code class="language-plaintext highlighter-rouge">crypto_sign_picnicl{1,3,5}{fs,ur}</code></li> <li>qTESLA: <code class="language-plaintext highlighter-rouge">crypto_sign_qtesla{128,192,256}</code></li> <li>Rainbow: <code class="language-plaintext highlighter-rouge">crypto_sign_rainbow{1a,1b,1c,3b,3c,4a,5c,6a,6b}</code></li> <li>Ramstake: <code class="language-plaintext highlighter-rouge">crypto_kem_ramstakers{216091,756839}</code></li> <li>SABER: <code class="language-plaintext highlighter-rouge">crypto_kem_{firesaber,lightsaber,saber}</code></li> <li>SPHINCS+: <code class="language-plaintext highlighter-rouge">crypto_sign_sphincs{f,s}{128,192,256}{haraka,sha256,shake256}</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">libpqcrypto</code> collects this software into an integrated library, with</p> <ul> <li>a unified compilation framework,</li> <li>an automatic test framework,</li> <li>automatic selection of the fastest implementation of each system,</li> <li>a unified C interface following the NaCl/TweetNaCl/SUPERCOP/libsodium API,</li> <li>a unified Python interface,</li> <li>command-line signature/verification/encryption/decryption tools, and</li> <li>command-line benchmarking tools.</li> </ul> <p><code class="language-plaintext highlighter-rouge">libpqcrypto</code> also integrates some symmetric-crypto software from SUPERCOP, including the AES-256-CTR stream cipher (an OpenSSL wrapper and a separate implementation from Romain Dolbeau), the Salsa20-256 and ChaCha20-256 stream ciphers (implementations from Daniel J. Bernstein, Romain Dolbeau, Martin Goll, Shay Gueron, Ted Krovetz, Tanja Lange, Andrew Moon, Samuel Neves, and Peter Schwabe), the Poly1305 MAC (implementations from Daniel J. Bernstein, Billy Brumley, Andrew Moon, and Peter Schwabe), the SHA-512 hash function (an OpenSSL wrapper, a separate implementation from Daniel J. Bernstein, and a separate implementation from Thomas Pornin via <code class="language-plaintext highlighter-rouge">sphlib</code>), portions of the Keccak Code Package (from Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, and Ronny Van Keer), and the SHAKE256 hash function (a KCP wrapper and implementations from David Leon Gil).</p> <h1 id="liboqs">liboqs</h1> <p>liboqs is part of the Open Quantum Safe (OQS) project, which aims to develop and integrate into applications quantum-safe cryptography to facilitate deployment and testing in real world contexts. In particular, OQS provides prototype integrations of liboqs into protocols like TLS, X.509, and S/MIME, through our OpenSSL 3 Provider and we provide a variety of other post-quantum-enabled demos.</p> <h3 id="supported-algorithms">Supported Algorithms</h3> <h4 id="key-encapsulation-mechanisms">Key encapsulation mechanisms</h4> <ul> <li><strong>BIKE</strong>: BIKE-L1, BIKE-L3, BIKE-L5</li> <li><strong>Classic McEliece</strong>: Classic-McEliece-348864†, Classic-McEliece-348864f†, Classic-McEliece-460896†, Classic-McEliece-460896f†, Classic-McEliece-6688128†, Classic-McEliece-6688128f†, Classic-McEliece-6960119†, Classic-McEliece-6960119f†, Classic-McEliece-8192128†, Classic-McEliece-8192128f†</li> <li><strong>FrodoKEM</strong>: FrodoKEM-640-AES, FrodoKEM-640-SHAKE, FrodoKEM-976-AES, FrodoKEM-976-SHAKE, FrodoKEM-1344-AES, FrodoKEM-1344-SHAKE</li> <li><strong>HQC</strong>: HQC-128, HQC-192, HQC-256</li> <li><strong>Kyber</strong>: Kyber512, Kyber768, Kyber1024</li> <li><strong>ML-KEM</strong>: ML-KEM-512-ipd (alias: ML-KEM-512), ML-KEM-768-ipd (alias: ML-KEM-768), ML-KEM-1024-ipd (alias: ML-KEM-1024)</li> <li><strong>NTRU-Prime</strong>: sntrup761</li> </ul> <h4 id="signature-schemes">Signature schemes</h4> <ul> <li><strong>CRYSTALS-Dilithium</strong>: Dilithium2, Dilithium3, Dilithium5</li> <li><strong>Falcon</strong>: Falcon-512, Falcon-1024</li> <li><strong>ML-DSA</strong>: ML-DSA-44-ipd (alias: ML-DSA-44), ML-DSA-65-ipd (alias: ML-DSA-65), ML-DSA-87-ipd (alias: ML-DSA-87)</li> <li><strong>SPHINCS+-SHA2</strong>: SPHINCS+-SHA2-128f-simple, SPHINCS+-SHA2-128s-simple, SPHINCS+-SHA2-192f-simple, SPHINCS+-SHA2-192s-simple, SPHINCS+-SHA2-256f-simple, SPHINCS+-SHA2-256s-simple</li> <li><strong>SPHINCS+-SHAKE</strong>: SPHINCS+-SHAKE-128f-simple, SPHINCS+-SHAKE-128s-simple, SPHINCS+-SHAKE-192f-simple, SPHINCS+-SHAKE-192s-simple, SPHINCS+-SHAKE-256f-simple, SPHINCS+-SHAKE-256s-simple</li> </ul> <p>Note that for algorithms marked with a dagger (†), liboqs contains at least one implementation that uses a large amount of stack space; this may cause failures when run in threads or in constrained environments.</p> <h1 id="pq-crystals">pq-crystals</h1> <p>The “Cryptographic Suite for Algebraic Lattices” (CRYSTALS) encompasses two cryptographic primitives: <a href="https://pq-crystals.org/kyber/index.shtml">Kyber</a>, an IND-CCA2-secure key-encapsulation mechanism (KEM); and <a href="https://pq-crystals.org/dilithium/index.shtml">Dilithium</a>, a strongly EUF-CMA-secure digital signature algorithm. Both algorithms are based on hard problems over module lattices, are designed to withstand attacks by large quantum computers, and have been submitted to the <a href="https://csrc.nist.gov/Projects/Post-Quantum-Cryptography">NIST post-quantum cryptography project</a>.</p> <h3 id="module-lattices">Module Lattices</h3> <p>Module lattices can be thought of as lattices that lie between the ones used in the definitions of the <a href="https://dl.acm.org/citation.cfm?id=1568324">LWE problem</a>, and those used for the <a href="https://eprint.iacr.org/2012/230">Ring-LWE</a> problem. If the ring underlying the module has a sufficiently high degree (like 256), then these lattices inherit all the efficiency of the ones used in the Ring-LWE problem, and additionally have the following advantages, when used in our cryptographic algorithms:</p> <ul> <li>The only operations required for Kyber and Dilithium for <em>all</em> security levels are variants of Keccak, additions/multiplications in Zq for a fixed q, and the NTT (number theoretic transform) for the ring Zq[X]/(X256+1). This means that increasing/decreasing the security level involves virtually no re-implementation of the schemes in software or hardware. Changing a few parameters is all that one needs to convert an optimized implementation for one security level into an optimized implementation for a different one.</li> <li>The lattices used in Kyber and Dilithium have less algebraic structure than those used for Ring-LWE and are closer to the unstructured lattices used in LWE. It is therefore conceivable that if algebraic attacks against Ring-LWE appear (there are none that we are aware of at this point), then they may be less effective against schemes like Kyber and Dilithium.</li> </ul> <h3 id="news">News</h3> <ul> <li><strong>2019-05-21:</strong> New paper on <a href="https://eprint.iacr.org/2019/489">Kyber on Cortex-M4</a></li> <li><strong>2019-03-30:</strong> CRYSTALS round-2 versions are submitted and online.</li> <li><strong>2017-12-30:</strong> CRYSTALS website is online</li> </ul> <h3 id="credits">Credits</h3> <p><strong>The design and implementation of Kyber and Dilithium have been supported by</strong></p> <ul> <li>the European Commission through the ICT program under contract <a href="https://pqcrypto.eu.org/">ICT-645622 (PQCRYPTO)</a>;</li> <li>the European Commission through the ICT program under contract <a href="https://www.safecrypto.eu/">ICT-644729 (SAFEcrypto)</a>;</li> <li>the Swiss National Science Foundation through the 2014 transfer ERC Starting Grant CRETP2-166734 (FELICITY);</li> <li>the Netherlands Organization for Scientific Research (NWO) through Veni grant 639.021.645 (Cryptanalysis of Lattice-based Cryptography);</li> <li>the European Commission through the ERC Starting Grant <a href="http://perso.ens-lyon.fr/damien.stehle/LATTAC.html">ERC-2013-StG-335086 (LATTAC)</a>;</li> <li>the European Commission through the ERC Consolidator Grant ERC-2013-CoG-615073 (ERCC);</li> <li>the European Commission through the ERC Starting Grant ERC-2018-StG-805031 (EPOQUE);</li> <li>the DFG through the Cluster of Excellence 2092 (<a href="https://casa.rub.de/">CASA</a>).</li> </ul> <h1 id="铜锁tongsuo">铜锁/Tongsuo</h1> <h2 id="项目简介"><strong>项目简介:</strong></h2> <p>铜锁（Tongsuo）是一个提供现代密码学算法和安全通信协议的开源基础密码库，为存储、网络、密钥管理、隐私计算、区块链等诸多业务场景提供底层的密码学基础能力，实现数据在传输、使用、存储等过程中的私密性、完整性和可认证性，为数据生命周期中的隐私和安全提供保护能力。铜锁诞生于蚂蚁集团并广泛的应用在蚂蚁集团内部以及外部的多种业务当中，提供了TLS、数据存储、国密合规等关键的密码学相关能力，确保了各项业务平稳、安全、合规的运行。铜锁同时还在前沿密码学领域进行了支持，包括隐私计算场景下所需的多种半同态加密算法、零知识证明、轻量级密码算法和协议以及后量子密码学算法等。</p> <p>铜锁做为国内稀缺的密码学开源项目，填补了相关领域产品的空白，是我国建设国产密码学开源大生态、发展前沿密码学技术的关键一环。同时基于支付宝海量的用户场景，其性能和稳定性也达到了互联网生产级别。</p> <h2 id="功能特性"><strong>功能特性:</strong></h2> <h3 id="技术合规能力">技术合规能力</h3> <ul> <li>符合GM/T 0028《密码模块安全技术要求》的”软件密码模块安全一级”资质</li> <li>符合 GM/T 0005-2021《随机性检测规范》</li> </ul> <h3 id="零知识证明zkp">零知识证明（ZKP）</h3> <ul> <li>Bulletproofs Range</li> <li>Bulletproofs R1CS</li> </ul> <h3 id="密码学算法">密码学算法</h3> <ul> <li>中国商用密码算法：SM2、SM3、SM4、祖冲之等</li> <li>国际主流算法：ECDSA、RSA、AES、SHA等</li> <li>同态加密算法：EC-ElGamal、Paillier、Twisted-ElGamal等</li> <li>后量子密码学：Kyber、Dilithium等</li> </ul> <h3 id="安全通信协议">安全通信协议</h3> <ul> <li>支持GB/T 38636-2020 TLCP标准，即双证书国密通信协议</li> <li>支持RFC 8998，即TLS 1.3 +国密单证书</li> <li>支持QUIC API</li> <li>支持Delegated Credentials功能，基于draft-ietf-tls-subcerts-10</li> <li>支持TLS证书压缩</li> <li>支持紧凑TLS协议*</li> </ul>]]></content><author><name></name></author><category term="pqc"/><category term="code"/><summary type="html"><![CDATA[Commonly used post-quantum cryptography open source libraries]]></summary></entry></feed>