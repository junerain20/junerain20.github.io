<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://junerain20.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://junerain20.github.io//" rel="alternate" type="text/html" hreflang="cn"/><updated>2024-03-26T16:17:32+00:00</updated><id>https://junerain20.github.io//feed.xml</id><title type="html">密码系统安全实验室</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Crypto-library</title><link href="https://junerain20.github.io//blog/2024/crypto-library/" rel="alternate" type="text/html" title="Crypto-library"/><published>2024-03-22T00:00:00+00:00</published><updated>2024-03-22T00:00:00+00:00</updated><id>https://junerain20.github.io//blog/2024/crypto-library</id><content type="html" xml:base="https://junerain20.github.io//blog/2024/crypto-library/"><![CDATA[<h1 id="libpqcrypto">libpqcrypto</h1> <p><code class="language-plaintext highlighter-rouge">libpqcrypto</code> is a new cryptographic software library produced by the PQCRYPTO project.</p> <p>PQCRYPTO, working jointly with many other researchers around the world, submitted 22 proposals to NIST’s ongoing post-quantum standardization project. Each submission specifies a family of cryptographic systems, offering various tradeoffs between performance and security. Each submission includes software: a (portable) reference C implementation, and in many cases additional (not necessarily portable) implementations providing better performance (often using assembly language or “intrinsics”). <code class="language-plaintext highlighter-rouge">libpqcrypto</code> includes software for the following 77 cryptographic systems (50 signature systems and 27 encryption systems) from 19 of the 22 PQCRYPTO submissions:</p> <ul> <li>BIG QUAKE: <code class="language-plaintext highlighter-rouge">crypto_kem_bigquake{1,3,5}</code></li> <li>Classic McEliece: <code class="language-plaintext highlighter-rouge">crypto_kem_mceliece{6960119,8192128}</code></li> <li>CRYSTALS-DILITHIUM: <code class="language-plaintext highlighter-rouge">crypto_sign_dilithium{2,3,4}</code></li> <li>CRYSTALS-KYBER: <code class="language-plaintext highlighter-rouge">crypto_kem_kyber{512,768,1024}</code></li> <li>DAGS: <code class="language-plaintext highlighter-rouge">crypto_kem_dags{3,5}</code></li> <li>FrodoKEM: <code class="language-plaintext highlighter-rouge">crypto_kem_frodokem{640,976}</code></li> <li>Gui: <code class="language-plaintext highlighter-rouge">crypto_sign_gui{184,312,448}</code></li> <li>KINDI: <code class="language-plaintext highlighter-rouge">crypto_kem_kindi{256342,256522,512222,512241,512321}</code></li> <li>LUOV: <code class="language-plaintext highlighter-rouge">crypto_sign_luov{863256,890351,8117404,4849242,6468330,8086399}</code></li> <li>MQDSS: <code class="language-plaintext highlighter-rouge">crypto_sign_mqdss{48,64}</code></li> <li>NewHope: <code class="language-plaintext highlighter-rouge">crypto_kem_newhope{512,1024}cca</code></li> <li>NTRU-HRSS-KEM: <code class="language-plaintext highlighter-rouge">crypto_kem_ntruhrss701</code></li> <li>NTRU Prime: <code class="language-plaintext highlighter-rouge">crypto_kem_{ntrulpr,sntrup}4591761</code></li> <li>Picnic: <code class="language-plaintext highlighter-rouge">crypto_sign_picnicl{1,3,5}{fs,ur}</code></li> <li>qTESLA: <code class="language-plaintext highlighter-rouge">crypto_sign_qtesla{128,192,256}</code></li> <li>Rainbow: <code class="language-plaintext highlighter-rouge">crypto_sign_rainbow{1a,1b,1c,3b,3c,4a,5c,6a,6b}</code></li> <li>Ramstake: <code class="language-plaintext highlighter-rouge">crypto_kem_ramstakers{216091,756839}</code></li> <li>SABER: <code class="language-plaintext highlighter-rouge">crypto_kem_{firesaber,lightsaber,saber}</code></li> <li>SPHINCS+: <code class="language-plaintext highlighter-rouge">crypto_sign_sphincs{f,s}{128,192,256}{haraka,sha256,shake256}</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">libpqcrypto</code> collects this software into an integrated library, with</p> <ul> <li>a unified compilation framework,</li> <li>an automatic test framework,</li> <li>automatic selection of the fastest implementation of each system,</li> <li>a unified C interface following the NaCl/TweetNaCl/SUPERCOP/libsodium API,</li> <li>a unified Python interface,</li> <li>command-line signature/verification/encryption/decryption tools, and</li> <li>command-line benchmarking tools.</li> </ul> <p><code class="language-plaintext highlighter-rouge">libpqcrypto</code> also integrates some symmetric-crypto software from SUPERCOP, including the AES-256-CTR stream cipher (an OpenSSL wrapper and a separate implementation from Romain Dolbeau), the Salsa20-256 and ChaCha20-256 stream ciphers (implementations from Daniel J. Bernstein, Romain Dolbeau, Martin Goll, Shay Gueron, Ted Krovetz, Tanja Lange, Andrew Moon, Samuel Neves, and Peter Schwabe), the Poly1305 MAC (implementations from Daniel J. Bernstein, Billy Brumley, Andrew Moon, and Peter Schwabe), the SHA-512 hash function (an OpenSSL wrapper, a separate implementation from Daniel J. Bernstein, and a separate implementation from Thomas Pornin via <code class="language-plaintext highlighter-rouge">sphlib</code>), portions of the Keccak Code Package (from Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, and Ronny Van Keer), and the SHAKE256 hash function (a KCP wrapper and implementations from David Leon Gil).</p> <h1 id="liboqs">liboqs</h1> <p>liboqs is part of the Open Quantum Safe (OQS) project, which aims to develop and integrate into applications quantum-safe cryptography to facilitate deployment and testing in real world contexts. In particular, OQS provides prototype integrations of liboqs into protocols like TLS, X.509, and S/MIME, through our OpenSSL 3 Provider and we provide a variety of other post-quantum-enabled demos.</p> <h3 id="supported-algorithms">Supported Algorithms</h3> <h4 id="key-encapsulation-mechanisms">Key encapsulation mechanisms</h4> <ul> <li><strong>BIKE</strong>: BIKE-L1, BIKE-L3, BIKE-L5</li> <li><strong>Classic McEliece</strong>: Classic-McEliece-348864†, Classic-McEliece-348864f†, Classic-McEliece-460896†, Classic-McEliece-460896f†, Classic-McEliece-6688128†, Classic-McEliece-6688128f†, Classic-McEliece-6960119†, Classic-McEliece-6960119f†, Classic-McEliece-8192128†, Classic-McEliece-8192128f†</li> <li><strong>FrodoKEM</strong>: FrodoKEM-640-AES, FrodoKEM-640-SHAKE, FrodoKEM-976-AES, FrodoKEM-976-SHAKE, FrodoKEM-1344-AES, FrodoKEM-1344-SHAKE</li> <li><strong>HQC</strong>: HQC-128, HQC-192, HQC-256</li> <li><strong>Kyber</strong>: Kyber512, Kyber768, Kyber1024</li> <li><strong>ML-KEM</strong>: ML-KEM-512-ipd (alias: ML-KEM-512), ML-KEM-768-ipd (alias: ML-KEM-768), ML-KEM-1024-ipd (alias: ML-KEM-1024)</li> <li><strong>NTRU-Prime</strong>: sntrup761</li> </ul> <h4 id="signature-schemes">Signature schemes</h4> <ul> <li><strong>CRYSTALS-Dilithium</strong>: Dilithium2, Dilithium3, Dilithium5</li> <li><strong>Falcon</strong>: Falcon-512, Falcon-1024</li> <li><strong>ML-DSA</strong>: ML-DSA-44-ipd (alias: ML-DSA-44), ML-DSA-65-ipd (alias: ML-DSA-65), ML-DSA-87-ipd (alias: ML-DSA-87)</li> <li><strong>SPHINCS+-SHA2</strong>: SPHINCS+-SHA2-128f-simple, SPHINCS+-SHA2-128s-simple, SPHINCS+-SHA2-192f-simple, SPHINCS+-SHA2-192s-simple, SPHINCS+-SHA2-256f-simple, SPHINCS+-SHA2-256s-simple</li> <li><strong>SPHINCS+-SHAKE</strong>: SPHINCS+-SHAKE-128f-simple, SPHINCS+-SHAKE-128s-simple, SPHINCS+-SHAKE-192f-simple, SPHINCS+-SHAKE-192s-simple, SPHINCS+-SHAKE-256f-simple, SPHINCS+-SHAKE-256s-simple</li> </ul> <p>Note that for algorithms marked with a dagger (†), liboqs contains at least one implementation that uses a large amount of stack space; this may cause failures when run in threads or in constrained environments.</p> <h1 id="pq-crystals">pq-crystals</h1> <p>The “Cryptographic Suite for Algebraic Lattices” (CRYSTALS) encompasses two cryptographic primitives: <a href="https://pq-crystals.org/kyber/index.shtml">Kyber</a>, an IND-CCA2-secure key-encapsulation mechanism (KEM); and <a href="https://pq-crystals.org/dilithium/index.shtml">Dilithium</a>, a strongly EUF-CMA-secure digital signature algorithm. Both algorithms are based on hard problems over module lattices, are designed to withstand attacks by large quantum computers, and have been submitted to the <a href="https://csrc.nist.gov/Projects/Post-Quantum-Cryptography">NIST post-quantum cryptography project</a>.</p> <h3 id="module-lattices">Module Lattices</h3> <p>Module lattices can be thought of as lattices that lie between the ones used in the definitions of the <a href="https://dl.acm.org/citation.cfm?id=1568324">LWE problem</a>, and those used for the <a href="https://eprint.iacr.org/2012/230">Ring-LWE</a> problem. If the ring underlying the module has a sufficiently high degree (like 256), then these lattices inherit all the efficiency of the ones used in the Ring-LWE problem, and additionally have the following advantages, when used in our cryptographic algorithms:</p> <ul> <li>The only operations required for Kyber and Dilithium for <em>all</em> security levels are variants of Keccak, additions/multiplications in Zq for a fixed q, and the NTT (number theoretic transform) for the ring Zq[X]/(X256+1). This means that increasing/decreasing the security level involves virtually no re-implementation of the schemes in software or hardware. Changing a few parameters is all that one needs to convert an optimized implementation for one security level into an optimized implementation for a different one.</li> <li>The lattices used in Kyber and Dilithium have less algebraic structure than those used for Ring-LWE and are closer to the unstructured lattices used in LWE. It is therefore conceivable that if algebraic attacks against Ring-LWE appear (there are none that we are aware of at this point), then they may be less effective against schemes like Kyber and Dilithium.</li> </ul> <h3 id="news">News</h3> <ul> <li><strong>2019-05-21:</strong> New paper on <a href="https://eprint.iacr.org/2019/489">Kyber on Cortex-M4</a></li> <li><strong>2019-03-30:</strong> CRYSTALS round-2 versions are submitted and online.</li> <li><strong>2017-12-30:</strong> CRYSTALS website is online</li> </ul> <h3 id="credits">Credits</h3> <p><strong>The design and implementation of Kyber and Dilithium have been supported by</strong></p> <ul> <li>the European Commission through the ICT program under contract <a href="https://pqcrypto.eu.org/">ICT-645622 (PQCRYPTO)</a>;</li> <li>the European Commission through the ICT program under contract <a href="https://www.safecrypto.eu/">ICT-644729 (SAFEcrypto)</a>;</li> <li>the Swiss National Science Foundation through the 2014 transfer ERC Starting Grant CRETP2-166734 (FELICITY);</li> <li>the Netherlands Organization for Scientific Research (NWO) through Veni grant 639.021.645 (Cryptanalysis of Lattice-based Cryptography);</li> <li>the European Commission through the ERC Starting Grant <a href="http://perso.ens-lyon.fr/damien.stehle/LATTAC.html">ERC-2013-StG-335086 (LATTAC)</a>;</li> <li>the European Commission through the ERC Consolidator Grant ERC-2013-CoG-615073 (ERCC);</li> <li>the European Commission through the ERC Starting Grant ERC-2018-StG-805031 (EPOQUE);</li> <li>the DFG through the Cluster of Excellence 2092 (<a href="https://casa.rub.de/">CASA</a>).</li> </ul> <h1 id="铜锁tongsuo">铜锁/Tongsuo</h1> <h2 id="项目简介"><strong>项目简介:</strong></h2> <p>铜锁（Tongsuo）是一个提供现代密码学算法和安全通信协议的开源基础密码库，为存储、网络、密钥管理、隐私计算、区块链等诸多业务场景提供底层的密码学基础能力，实现数据在传输、使用、存储等过程中的私密性、完整性和可认证性，为数据生命周期中的隐私和安全提供保护能力。铜锁诞生于蚂蚁集团并广泛的应用在蚂蚁集团内部以及外部的多种业务当中，提供了TLS、数据存储、国密合规等关键的密码学相关能力，确保了各项业务平稳、安全、合规的运行。铜锁同时还在前沿密码学领域进行了支持，包括隐私计算场景下所需的多种半同态加密算法、零知识证明、轻量级密码算法和协议以及后量子密码学算法等。</p> <p>铜锁做为国内稀缺的密码学开源项目，填补了相关领域产品的空白，是我国建设国产密码学开源大生态、发展前沿密码学技术的关键一环。同时基于支付宝海量的用户场景，其性能和稳定性也达到了互联网生产级别。</p> <h2 id="功能特性"><strong>功能特性:</strong></h2> <h3 id="技术合规能力">技术合规能力</h3> <ul> <li>符合GM/T 0028《密码模块安全技术要求》的”软件密码模块安全一级”资质</li> <li>符合 GM/T 0005-2021《随机性检测规范》</li> </ul> <h3 id="零知识证明zkp">零知识证明（ZKP）</h3> <ul> <li>Bulletproofs Range</li> <li>Bulletproofs R1CS</li> </ul> <h3 id="密码学算法">密码学算法</h3> <ul> <li>中国商用密码算法：SM2、SM3、SM4、祖冲之等</li> <li>国际主流算法：ECDSA、RSA、AES、SHA等</li> <li>同态加密算法：EC-ElGamal、Paillier、Twisted-ElGamal等</li> <li>后量子密码学：Kyber、Dilithium等</li> </ul> <h3 id="安全通信协议">安全通信协议</h3> <ul> <li>支持GB/T 38636-2020 TLCP标准，即双证书国密通信协议</li> <li>支持RFC 8998，即TLS 1.3 +国密单证书</li> <li>支持QUIC API</li> <li>支持Delegated Credentials功能，基于draft-ietf-tls-subcerts-10</li> <li>支持TLS证书压缩</li> <li>支持紧凑TLS协议*</li> </ul>]]></content><author><name></name></author><category term="pqc"/><category term="code"/><summary type="html"><![CDATA[Commonly used post-quantum cryptography open source libraries]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://junerain20.github.io//blog/2024/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2024-03-15T00:00:00+00:00</published><updated>2024-03-15T00:00:00+00:00</updated><id>https://junerain20.github.io//blog/2024/distill</id><content type="html" xml:base="https://junerain20.github.io//blog/2024/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>